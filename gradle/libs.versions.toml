[versions]
java = "17"
kotlin = "1.8.10"
springboot = "3.0.6"
springauthorizationserver = "1.0.2"
springdependencymanager = "1.1.0"
springdoc = "2.1.0"
kover = "0.6.1"
ktlint = "11.3.1"
detekt = "1.22.0"
okhttp = "4.10.0"
retrofit = "2.9.0"
micrometer = "1.10.4"
mockk = "1.13.4"
springmockk = "4.0.1"
testcontainers = "1.17.6"
kotlinlogging = "3.0.4"
dokka = "1.8.10"
jsonschema2pojo = "1.1.3"
swaggerparser = "2.1.11"
fabrikt = "8.8.0"
wiremock = "2.35.0"
assertj = "3.23.1"
slf4j = "2.0.6"
logback = "1.4.5"
coroutines = "1.6.4"
retry = "1.0.9"
ronin-kafka = "1.0.0"
kafka = "3.2.1"
bouncycastle = "1.70"
jose = "9.24.4"
datadog = "1.14.0"
gorylenko = "2.4.1"

[libraries]
gradle-kotlin-jvm = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
gradle-kotlin-noarg = { module = "org.jetbrains.kotlin:kotlin-noarg", version.ref = "kotlin" }
gradle-kotlin-allopen = { module = "org.jetbrains.kotlin:kotlin-allopen", version.ref = "kotlin" }
gradle-springboot = { module = "org.springframework.boot:spring-boot-gradle-plugin", version.ref = "springboot" }
gradle-springdepmanager = { module = "io.spring.gradle:dependency-management-plugin", version.ref = "springdependencymanager" }
gradle-kover = { module = "org.jetbrains.kotlinx:kover", version.ref = "kover" }
gradle-ktlint = { module = "org.jlleitschuh.gradle:ktlint-gradle", version.ref = "ktlint" }
gradle-detekt = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }

kotlin-coroutines-bom = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-bom", version.ref = "coroutines" }
kotlin-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
kotlin-retry = { module = "com.michael-bull.kotlin-retry:kotlin-retry", version.ref = "retry" }

okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp-urlconnection = { module = "com.squareup.okhttp3:okhttp-urlconnection", version.ref = "okhttp" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit-jackson = { module = "com.squareup.retrofit2:converter-jackson", version.ref = "retrofit" }

springdoc-ui-common = { module = "org.springdoc:springdoc-openapi-starter-common", version.ref = "springdoc" }
springdoc-ui-web = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc" }
springdoc-ui-webflux = { module = "org.springdoc:springdoc-openapi-starter-webflux-ui", version.ref = "springdoc" }
springdoc-security = { module = "org.springdoc:springdoc-openapi-starter-common", version.ref = "springdoc" }

spring-boot-bom = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "springboot" }
spring-boot-core = { module = "org.springframework.boot:spring-boot" }
spring-boot-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-boot-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-boot-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-autoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure" }
spring-boot-starter-jdbc = { module = "org.springframework.boot:spring-boot-starter-jdbc" }
spring-boot-starter-oauth2-client = { module = "org.springframework.boot:spring-boot-starter-oauth2-client" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor" }
spring-devtools = { module = "org.springframework.boot:spring-boot-devtools" }
spring-context = { module = "org.springframework:spring-context" }
spring-webflux = { module = "org.springframework:spring-webflux" }
spring-web = { module = "org.springframework:spring-web" }
spring-security-core = { module = "org.springframework.security:spring-security-core" }
spring-security-resource-server = { module = "org.springframework.security:spring-security-oauth2-resource-server" }
spring-security-jose = { module = "org.springframework.security:spring-security-oauth2-jose" }
spring-kafka = { module ="org.springframework.kafka:spring-kafka" }
spring-security-oauth2-authorization-server = { module = "org.springframework.security:spring-security-oauth2-authorization-server", version.ref = "springauthorizationserver" }

liquibase-core = { module = "org.liquibase:liquibase-core" }

jakarta-validation-api = { module = "jakarta.validation:jakarta.validation-api" }

mysql-connector = { module = "com.mysql:mysql-connector-j" }

ronin-kafka = { module = "com.projectronin:ronin-kafka", version.ref = "ronin-kafka"}
kafka = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }
kafka-streams = { module = "org.apache.kafka:kafka-streams", version.ref = "kafka" }
kafka-streams-test-utils = { module = "org.apache.kafka:kafka-streams-test-utils", version.ref = "kafka" }

spring-test-boot = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-test-security = { module = "org.springframework.security:spring-security-test" }

micrometer-statsd = { module = "io.micrometer:micrometer-registry-statsd", version.ref = "micrometer" }
logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version = "7.2" }
logback-core = { module = "ch.qos.logback:logback-core", version.ref = "logback" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }


jackson-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations" }
jackson-datatype-jdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" }
jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml" }

jsonschema2pojo = { module = "org.jsonschema2pojo:jsonschema2pojo-gradle-plugin", version.ref = "jsonschema2pojo" }

swaggerparser = { module = "io.swagger.parser.v3:swagger-parser", version.ref = "swaggerparser" }
fabrikt = { module = "com.cjbooms:fabrikt", version.ref = "fabrikt" }

mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
springmockk = { module = "com.ninja-squad:springmockk", version.ref = "springmockk" }

testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-mysql = { module = "org.testcontainers:mysql", version.ref = "testcontainers" }
testcontainers-kafka = { module = "org.testcontainers:kafka", version.ref = "testcontainers" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }

kotlinlogging = { module = "io.github.microutils:kotlin-logging-jvm", version.ref = "kotlinlogging" }
wiremock = { module = "com.github.tomakehurst:wiremock-jre8-standalone", version.ref = "wiremock" }

assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }

bouncycastle = { module = "org.bouncycastle:bcpkix-jdk15on", version.ref = "bouncycastle" }

jose = { module = "com.nimbusds:nimbus-jose-jwt", version.ref = "jose" }
datadog-api = { module = "com.datadoghq:dd-trace-api", version.ref = "datadog" }

[bundles]
spring-web = ["spring-boot-web", "spring-boot-security", "spring-boot-actuator", "spring-boot-validation", "springdoc-ui-web", "springdoc-security", "jackson-kotlin", "micrometer-statsd", "logback-encoder", "kotlinlogging"]
spring-webflux = ["spring-boot-webflux", "spring-boot-security", "spring-boot-actuator", "spring-boot-validation", "springdoc-ui-webflux", "springdoc-security", "jackson-kotlin", "micrometer-statsd", "logback-encoder", "kotlinlogging", "kotlinx-coroutines-reactor", "kotlin-coroutines-core"]
spring-data = ["spring-boot-data-jpa"]
spring-test = ["spring-test-boot", "spring-test-security", "mockk", "springmockk"]
testcontainers = ["testcontainers", "testcontainers-mysql", "testcontainers-kafka", "testcontainers-junit"]
retrofit = ["retrofit", "retrofit-jackson"]
jackson = ["jackson-kotlin", "jackson-datatype-jdk8", "jackson-datatype-jsr310"]
kafka = ["ronin-kafka", "kafka"]
kafka-streams = ["ronin-kafka", "kafka", "kafka-streams", "kafka-streams-test-utils"]

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }

spring-boot = { id = "org.springframework.boot", version.ref = "springboot" }
spring-depmanager = { id = "io.spring.dependency-management", version.ref = "springdependencymanager" }

detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
git-properties = { id = "com.gorylenko.gradle-git-properties", version.ref = "gorylenko"}